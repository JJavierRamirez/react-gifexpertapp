{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","defaultProps","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAqB5C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,aA6B/BZ,EAAYe,aAAe,G,mCCvCdC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,0FAE4EC,UAAUH,GAFtF,sBAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,6CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EAEZf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAkBtC,OAXAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAGGqB,EDb2BK,CAAa1B,GAAjCa,EAHuB,EAG7BN,KAAca,EAHe,EAGfA,QAEtB,OACI,qCACA,6BAAKpB,IACHoB,GAAY,mBAAGJ,UAAU,wCAAb,wBACV,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAACC,GAAD,OAEP,aADA,CACC,EAAD,eAGQA,GAFCA,EAAIC,aEjBxBgB,EAAe,WAAM,MAEM1C,mBAAS,CAAC,cAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAS9B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BASQ4C,EAAWnB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MC3BzB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e3f6ee82.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n    //Hook useState con variable y funcion\n    const [inputValue, setInputValue] = useState('');\n\n    //Funcion para manejar el evento de cambio en el imput\n    const handleInputChange = (e) => {\n        //(e.target.value) sirve para extraer el valor del elemento e que detecta el evento onChange\n        setInputValue(e.target.value);\n    }\n    \n    //Funcion para manjear el evento \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //console.log('Submit hecho');\n        //Validar que la cadena no sea vacia\n        if(inputValue.trim().length > 2){\n            setCategories(cats => [inputValue, ...cats ]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type='text'\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = { \n    setCategories: PropTypes.func.isRequired\n}\n\nAddCategory.defaultProps = {\n    \n}\n","export const getGifs = async(category) => {\n    //encodeURI reemplaza los espacios por %20 o +\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=1NPZFzz8l6KfEqT6dqJfN8O9DLZxXYTA&q=${encodeURI(category)}&limit=10`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    //console.log(id, title, url);\n    return (\n        <div className='card animate__animated animate__fadeInLeft'>\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n//import React, { useState, useEffect } from 'react';\n//import { getGifs } from '../helpers/getGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    // const [images, setImages] = useState([]);\n    const { data: images, loading } = useFetchGifs(category);\n   \n    return (\n        <>\n        <h3>{category}</h3>\n        { loading  && <p className='card animate__animated animate__flash'>Loading...</p> }\n            <div className='card-grid'>\n                \n                {\n                    images.map((img)=>\n                        //<li key={image.id}>{image.title}</li>\n                        <GifGridItem \n                            key={img.id}\n                            //img={img} esto manda a cada propiedad img (props.img) el img\n                            {...img} //Esto manda cada img como una propiedad (es decir solo props)\n                        />\n                    )\n                }\n\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setstate] = useState({\n        data: [],\n        loading: true, \n    }); \n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs=>{\n                setstate({\n                    data: imgs,\n                    loading: false,\n                })\n            })\n    }, [category]); //Disparara el efecto cuando category cambie\n    //Los corchetes vacios significan que el componente getGifs solo se renderizara una vez\n\n    return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    //Mandamos a llamar un hook ([variable, funcion])\n    const [categories, setCategories] = useState(['Baby yoda']);\n\n    // const handleAdd = (evento) =>{\n    //     //setCategories([...categories, 'Viajes']);\n    //     setCategories(cats => [...cats, 'Viajes']); //Callback donde primer argumento (cats) es el estado anterior y tiene que retornar un nuevo estado\n    // }\n\n    return (\n      <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={setCategories}></AddCategory>\n        <hr/>\n\n        {/* <button onClick={handleAdd}>Agregar</button> */}\n        \n        <ol>\n            {\n                //map regresa un nuevo arreglo con base a categories\n                //donde tiene una variable category declarada ahi mismo\n                //y un iterador, el cual no es necesario en este caso\n                //categories.map((category, i) => {\n                // categories.map(category => {\n                //     return <li key={category}> {category}</li>\n                // })\n                categories.map(category =>\n                  <GifGrid \n                    key={category} \n                    category={category}\n                  />\n                )\n            }\n        </ol>\n      </>\n    )\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}